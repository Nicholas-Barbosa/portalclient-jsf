<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">
	<ui:define name="head">
		<h:outputStylesheet name="chat.css" library="css" />

	</ui:define>
	<div id="chat">
		<p:commandButton value="Chat" type="button"
			style="bottom: 23px; right: 28px;width: 280px"
			styleClass="z-5 fixed  ui-button-secondary"
			onclick="PF('dlgChat').show();console.log(PF('dlgChat'))" />
		<p:growl id="msgs" showDetail="true" skipDetailIfEqualsSummary="true"
			widgetVar="msgsWidget" />
		<p:dialog modal="true" widgetVar="dlgChat" header="Chat"
			responsive="true">
			<p class="font-semibold w-10" id="p-chat"></p>
			<div class="card chat">
				<div class="chat-content" id="chat-content"></div>
				<div class="chat-input">
					<p:inputText placeholder="Type your message..."
						widgetVar="inputMessage" />
					<div class="input-buttons">
						<p:commandButton type="button" icon="pi pi-reply"
							styleClass="ui-button-success p-mr-2" onclick="sendMessage()" />
						<p:commandButton type="button" icon="pi pi-times"
							styleClass="ui-button-danger" onclick="sendMessage()"
							title="Desconectar" />
					</div>
				</div>
			</div>
		</p:dialog>
	</div>
	<script>
		
		let webSocket = new WebSocket("ws://"+window.location.host.concat("/portal/chat"));
		startWS();
		function startWS() {
			webSocket.onmessage = function(event) {
				let incomingMessage = JSON.parse(event.data);
				switch (incomingMessage.type) {
				case "CONVERSATION_HANDSHAKE":
					showMessage("Chat conectado",
							" VocÃª foi adicionado a um bate papo!")
					localStorage.setItem("conversation_id",
							incomingMessage.conversationId);
					document.getElementById("p-chat").innerHTML = "Conectado com "
							+ incomingMessage.interlocutor;
					break;
				case "INTERLOCUTOR":
					createDivMessage(false, incomingMessage.content);
					showMessage("Nova mensagem recebida!",incomingMessage.content)
					break;
				default:
					break;
				}

			}
		}

		function sendMessage() {
			const conversationId = localStorage.getItem("conversation_id") == null ? "-1"
					: localStorage.getItem("conversation_id");
			const messageContent = document
					.getElementById(PF("inputMessage").id).value;
			const message = {
				content : messageContent,
				conversation_id : conversationId
			};
			webSocket.send(JSON.stringify(message));
			createDivMessage(true, messageContent);
			document.getElementById(PF("inputMessage").id).value = "";

		}

		function createDivMessage(send, message) {
			const chatContent = document.getElementById("chat-content");
			const div = document.createElement("div");
			const divMessage = document.createElement("div");
			const p = document.createElement("p");
			div.classList.add("chat-message");
			if (!send)
				div.classList.add("send");
			divMessage.classList.add("message");
			p.innerHTML = message;
			divMessage.appendChild(p);
			div.appendChild(divMessage);
			chatContent.appendChild(div);
		}
		function showMessage(summary, detail) {
			if (PF('dlgChat').isVisible() == false)
				PF('msgsWidget').renderMessage({
					severity : 'info',
					summary : summary,
					detail : detail
				})
		}
	</script>
</ui:composition>
