<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
	xmlns:excp="http://java.sun.com/jsf/composite/components/exception"
	xmlns:o="http://omnifaces.org/ui">

<h:head>
	<f:facet name="first">
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta name="viewport"
			content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
	</f:facet>
	<title>FarAway - Login</title>
	<h:outputStylesheet name="primeflex-3.css" library="css" />
	<h:outputStylesheet name="css/#{userStylePreferences.layout}.css"
		library="rain-layout" />
</h:head>

<h:body styleClass="login-body">
	<f:metadata>
		<f:viewParam name="previousPage"
			value="#{loginController.previousPage}"></f:viewParam>
	</f:metadata>

	<div class="login-image">
		<p:graphicImage name="images/pages/bg-header-login.png"
			library="rain-layout" />
	</div>
	<div class="login-card">
		<h1>
			FARAWAY<span>LOGIN</span>
		</h1>
		<span>#{holdMessageView.label('boas_vindas_login')} </span>
		<h:form id="formLogin">
			<div class="form-group">
				<span>#{holdMessageView.label('usuario')}</span>
				<p:inputText placeholder="name@example.com"
					value="#{loginController.loginForm.username}" id="username" />
				<p:message for="@previous" />
			</div>
			<div class="form-group">
				<span>#{holdMessageView.label('senha')}</span>
				<p:password placeholder="write your password..."
					value="#{loginController.loginForm.password}" id="password" />
				<p:message for="@previous" />
			</div>
			<div class="form-group">
				<span>#{resourceBundleServiceImpl.getMessage('ambiente')}</span>
				<p:selectOneMenu id="option"
					value="#{loginController.loginForm.companyEnv}" required="true"
					requiredMessage="Selecione o ambiente da API"
					widgetVar="env-selector">
					<f:selectItem itemLabel="CDG" itemValue="CDG" />
					<f:selectItem itemLabel="NSG" itemValue="NSG" />
					<f:selectItem itemLabel="SPG" itemValue="SPG" />
					<f:selectItem itemLabel="GAUSS" itemValue="GAUSS" />
				</p:selectOneMenu>
				<p:message for="@previous" />
			</div>

			<p:commandButton value="LOGIN"
				action="#{loginController.authenticate}" onclick="login()"
				process="@form" update="@form" ajax="true"
				oncomplete="onCompleteLogin(xhr)" />
		</h:form>
		<p:messages id="messages" showDetail="true" closable="true"
			globalOnly="true" />
	</div>
	<p:remoteCommand name="updateDlgLoading" async="true" process="@none"
		update="dlgLoading" />
	<p:dialog header="Aguarde" widgetVar="dlgLoading" minHeight="40"
		width="350" showEffect="fade" modal="true" closable="false"
		draggable="false" id="dlgLoading">

		<div class="p-grid p-ai-center p-flex-column">
			<div class="p-col">
				<p id="progress-text" class="font-bold w-10 text-lg">Autenticando
					usuário...</p>
			</div>
			<div class="p-col">
				<p:progressBar id="progressBarIndeterminate" style="height:6px"
					mode="indeterminate" />
			</div>
		</div>

	</p:dialog>

	<excp:network />

	<o:socket channel="loginChannel" onmessage="socketListener"
		scope="session" onclose="socketCloseListener" connected="false" />


	<SCRIPT type="text/javascript">
		var finishedLoginProcess = false;
		var textProgress = document.getElementById('progress-text');
		function login() {
			PF('dlgLoading').show();
			textProgress.innerHTML = "Opening websocket connection..."
			OmniFaces.Push.open("loginChannel")
			let env = PF('env-selector').getSelectedValue();
			textProgress.innerHTML = 'Autenticando usuário em ' + env;

		}
		function onCompleteLogin(xhr) {
			if (xhr.getResponseHeader('ok') == null) {
				updateDlgLoading();
				return;
			}
			console.log('closing websocket connetcion...')
			textProgress.innerHTML = "Redirecionando..."
			OmniFaces.Push.close("loginChannel")
		}
		function socketListener(message, channel, event) {
			textProgress.innerHTML = message.message.string;
			console.log('message ' + message)
		}

		function socketCloseListener(code, channel, event) {
			console.log("socket close")

		}
	</SCRIPT>
</h:body>


</html>
